name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Code Quality Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with Black
      run: |
        black --check src/

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Exclude some combinations to reduce job count
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
    
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test import and basic functionality
      run: |
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "from src.config.config_manager import ConfigManager; print('Config manager imports successfully')"
        python -c "from src.models.expense import Expense; print('Expense model imports successfully')"
        python -c "from src.controllers.expense_controller import ExpenseController; print('Expense controller imports successfully')"
    
    - name: Test configuration loading
      run: |
        python -c "
        from src.config.config_manager import ConfigManager
        config = ConfigManager('config/config.yaml')
        print(f'App name: {config.get(\"app.name\")}')
        print('Configuration loads successfully')
        "
    
    - name: Run tests (if available)
      run: |
        if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
          python -m pytest tests/ -v
        else
          echo "No tests directory found or tests directory is empty"
        fi
      shell: bash

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ || true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json || true
        safety check || true