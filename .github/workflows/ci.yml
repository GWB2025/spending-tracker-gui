name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Code Quality Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with Black
      run: |
        black --check src/

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Exclude some combinations to reduce job count
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
    
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        echo "Installing minimal dependencies for basic testing..."
        # Install only the most essential dependencies
        pip install pyyaml>=6.0
        pip install python-dotenv>=0.19.0
        echo "Minimal dependencies installed successfully"
    
    - name: Setup test configuration (Unix)
      if: runner.os != 'Windows'
      run: |
        cp config/config.yaml.template config/config.yaml
        cp config/credentials.json.template config/credentials.json
        echo "Configuration files set up successfully (Unix)"
    
    - name: Setup test configuration (Windows)
      if: runner.os == 'Windows'
      run: |
        copy config\config.yaml.template config\config.yaml
        copy config\credentials.json.template config\credentials.json
        echo "Configuration files set up successfully (Windows)"
      shell: cmd
    
    - name: Verify configuration setup
      run: |
        echo "Verifying configuration files were created..."
        if [ -f "config/config.yaml" ]; then
          echo "✓ config.yaml exists"
          echo "First line:" && head -n 1 config/config.yaml
        else
          echo "✗ config.yaml missing"
          exit 1
        fi
        if [ -f "config/credentials.json" ]; then
          echo "✓ credentials.json exists"
        else
          echo "✗ credentials.json missing"
          exit 1
        fi
      shell: bash
    
    - name: Test basic imports and functionality
      run: |
        # Test Python environment
        python -c "import sys; print(f'✓ Python version: {sys.version}')"
        
        # Test standard library imports
        python -c "import json; import os; import pathlib; print('✓ Standard library imports successful')"
        
        # Test installed dependencies
        python -c "import yaml; print('✓ YAML imports successfully')"
        python -c "import dotenv; print('✓ Python-dotenv imports successfully')"
        
        # Test basic project imports (without dependencies that might fail)
        python -c "try: from src.config.config_manager import ConfigManager; print('✓ Config manager imports successfully'); except Exception as e: print('⚠ Config manager:', str(e))"
        python -c "try: from src.models.expense import Expense; print('✓ Expense model imports successfully'); except Exception as e: print('⚠ Expense model:', str(e))"
      shell: bash
    
    - name: Test configuration loading
      run: |
        python -c "from src.config.config_manager import ConfigManager; config = ConfigManager('config/config.yaml'); app_config = config.get_app_config(); print('✓ App name:', app_config.get('name', 'Unknown')); print('✓ Configuration loads successfully')"
      shell: bash
    
    - name: Run tests (if available)
      run: |
        if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
          python -m pytest tests/ -v
        else
          echo "No tests directory found or tests directory is empty"
        fi
      shell: bash

  gui-test:
    runs-on: ubuntu-latest
    name: GUI Integration Test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies for GUI
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libgl1-mesa-glx libglib2.0-0 libfontconfig1 libxrender1 libdbus-1-3
    
    - name: Setup test configuration
      run: |
        cp config/config.yaml.template config/config.yaml
        cp config/credentials.json.template config/credentials.json
    
    - name: Install GUI dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PySide6>=6.0.0
        pip install pillow>=9.0.0
        # Install core dependencies too
        pip install python-dotenv>=0.19.0
        pip install pyyaml>=6.0
    
    - name: Test GUI imports with virtual display
      run: |
        export DISPLAY=:99
        export QT_QPA_PLATFORM=offscreen
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 5
        
        python -c "import PySide6; print('✓ PySide6 imports successfully')"
        python -c "try: from src.gui.main_window import main; print('✓ GUI imports successfully'); except Exception as e: print('⚠ GUI import issue:', str(e)); exit(0)"

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ || true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json || true
        safety check || true